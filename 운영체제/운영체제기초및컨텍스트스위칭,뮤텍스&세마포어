# 운영체제란?

- 운영체제란?
    - 운영체제(Operating System)는 컴퓨터 시스템의 하드웨어적인 자원과 소프트웨어적인 자원을 효율적으로 관리함으로써 사용자가 컴퓨터를 편리하고, 효과적으로 사용할 수 있도록 환경을 제공하는 시스템 소프트웨어를 말한다.
    - 컴퓨터 사용자와 컴퓨터 하드웨어 간의 인터페이스로서 동작하는 시스템 소프트웨어의 일종으로 다른 응용 프로그램이 원활히 동작할 수 있도록 한다.
    - 운영체제의 코어(핵심)부분을 커널(Kernel)이라고 하는데, 일반적으로 커널에 여러가지 기능(라이브러리, 시스템 프로그램 등)이 추가된 상태를 통칭해서 운영체제라고 한다.
    - 최근에는 가상화 기술의 발전에 힘입어 실제 하드웨어가 아닌 가상머신 위에서 실행되기도 한다.

![Untitled](%E1%84%8B%E1%85%AE%E1%86%AB%E1%84%8B%E1%85%A7%E1%86%BC%E1%84%8E%E1%85%A6%E1%84%8C%E1%85%A6%E1%84%85%E1%85%A1%E1%86%AB%20ac368b53d4a74016ac0d6ba786b66ec2/Untitled.png)

- OS와 Application
    - 사용자 프로그램(Application)은 특정 운영체제에 맞춰서 만든다. 그러므로 한 애플리케이션은 서로 다른 운영체제에서 수행할 수 없다. 예를 들면 Windows에서 수행하는 프로그램을 그대로 Linux에 옮기면 수행되지 않는다.
        
        ![Untitled](%E1%84%8B%E1%85%AE%E1%86%AB%E1%84%8B%E1%85%A7%E1%86%BC%E1%84%8E%E1%85%A6%E1%84%8C%E1%85%A6%E1%84%85%E1%85%A1%E1%86%AB%20ac368b53d4a74016ac0d6ba786b66ec2/Untitled%201.png)
        
    
    애플리케이션은 위의 그림과 같이 운영체제 위에서 수행한다. 즉, 하드웨어 자원을 직접적으로 사용하지 않고 운영체제가 제공하는 자원만을 사용할 수 있다. 
    
    하드웨어 위에 커널(kernel)이 올라가고, 커널 위에서 셸(shell)과 애플리케이션(application)이 실행된다. 사용자는 기본적으로 셸을 통해 애플리케이션을 실행한다.
    
    - 커널 : 컴퓨터 운영 체제의 핵심이 되는 컴퓨터 프로그램으로, 시스템의 모든 것을 완전히 제어(control)한다.
        - 보안 : 커널은 컴퓨터 하드웨어와 프로세스의 보안을 책임진다.
        - 자원 관리 : 한정된 시스템 자원을 효율적으로 관리하여 프로그램의 실행을 원활하게 한다. 특히 프로세스에 처리기를 할당하는 것을 스케줄링이라 한다.
        - 추상화 : 같은 종류의 부품에 대해 다양한 하드웨어를 설계할 수 있기 때문에 하드웨어에 직접 접근하는 것은 문제를 매우 복잡하게 만들 수 있다. 일반적으로 커널은 운영체제의 복잡한 내부를 감추고 깔끔하고 일관성 있는 인터페이스를 하드웨어에 제공하기 위해 몇 가지 하드웨어 추상화(같은 종류의 장비에 대한 공통 명령어의 집합)들을 구현한다. 이 하드웨어 추상화는 프로그래머가 여러 장비에서 작동하는 프로그램을 개발하는 것을 돕는다.
    - 셸 : 운영체제 상에서 다양한 운영 체제 기능과 서비스를 구현하는 인터페이스를 제공하는 프로그램. 셸은 사용자와 운영체제의 내부(커널) 사이의 인터페이스를 감싸는 층.
    
- 운영체제의 목적 :
    - 운영체제의 목적에는 처리 능력 향상, 사용 가능도 향상, 신뢰도향상, 반환시간 단축 등이 있다. 처리 능력, 반환 시간, 사용 가능도, 신뢰도는 운영체제의 성능을 평가하는 기준이 된다.
        - 처리 능력 (Throughput) : 일정 시간 내에 시스템이 처리하는 일의 양
        - 반환 시간(Turn Around Time) : 시스템에 작업을 의뢰한 시간부터 처리가 완료될 때까지 걸린 시간
        - 사용 가능도 (Availability) : 시스템을 사용할 필요가 있을 때 즉시 사용 가능한 정도
        - 신뢰도 (Reliability) : 시스템이 주어진 문제를 정확하게 해결하는 정도

- 운영체제의 기능 (가볍게 읽어보아요!)
    1. 자원 관리 : 운영체제는 컴퓨터 시스템의 하드웨어 자원을 효율적으로 관리하는 역할을 한다. CPU(중앙처리장치), 메모리(Memory), 저장 장치(Storage), 입출력 장치(I/O Device) 등 하드웨어의 자원의 할당 및 해제를 담당하며, 자원 충돌을 방지하고 효율적인 자원 사용을 가능하게 한다.
    2. 메모리 관리 : 물리적 메모리와 가상 메모리를 관리한다. 프로세스가 메모리를 효율적으로 사용할 수 있도록 메모리 할당, 스왑, 페이지 관리 등을 수행한다. 이는 메모리 단편화를 최소화하고 시스템 성능을 최적화 하는 데 중요하다. 
    3. 프로세스 관리 : 프로세스 생성, 스케줄링, 동기화, 종료를 포함한 모든 프로세스의 생명주기를 관리한다. CPU 스케줄러를 통해 여러 프로세스가 CPU를 공유할 수 있게 하며, 프로세스 간의 통신과 동기화를 지원한다. 
    4. 디스크 및 파일 시스템 관리 : 운영체제는 디스크와 파일 시스템을 관리하여 파일의 생성, 삭제, 복사, 이동 등의 작업을 처리한다. 파일 시스템은 데이터의 영구적인 저장과 접근을 제공하여 사용자 및 응용 프로그램이 데이터를 쉽게 관리할 수 있도록 한다.
    5. 입출력 관리 : 운영체제는 입출력 장치와의 상호작용을 관리한다. 사용자와 응용 프로그램이 키보드, 마우스, 디스플레이, 프린터 등과의 통신을 할 수 있도록 지원하며 입출력 장치의 성능을 최적화 한다. 
    6. 사용자 인터페이스 : 운영체제는 입출력 장치와의 상호작용을 관리한다. 사용자와 응용 프로그램이 키보드, 마우스, 디스플레이, 프린터 등과의 통신을 할 수 있도록 지원하며 CLI(명령어 인터페이스)나 GUI (그래픽 사용자 인터페이스) 등을 통해 사용자 명령을 해석하고 실행한다.
    7. 네트워킹 : 운영체제는 컴퓨터 네트워크를 관리하고, 네트워크 프로토콜을 지원하여 컴퓨터 간의 통신을 가능하게 한다. 인터넷 연결, 데이터 전송, 네트워크 보안 등을 관리한다. 
    8. 오류처리 : 시스템 오류를 감지하고 대응한다. 오류 로그를 기록하며, 적절한 오류 메시지를 사용자에게 제공하고, 시스템 복구 절차를 실행하여 시스템 안정성을 유지한다.
    9. 시스템 보안 : 운영체제는 시스템의 보안을 유지하기 위해 접근 제어, 사용자 인증, 데이터 암호화,방화벽 설정 등의 기능을 제공한다. 

- 운영체제 종류
    - Windows (마이크로소프트) : 사용자 친화적(직관적이고 사용하기 쉬운 GUI) / 광범위한 소프트웨어 및 하드웨어 호환성 / 정기적인 업데이트
    - macOS (애플) : 매우 안정적(높은 안정성과 보안성) / 디자인과 편의성 / 애플 에코 시스템(다른 애플 제품과의 호환성과 통합성) / 제한된 하드웨어 지원(애플 하드웨어에서만 사용 가능)
    - Linux (리눅스 커뮤니티) : 주요 배포판은 Ubuntu, Fedora, Debian 등 / 오픈 소스 / 높은 커스터마이징 / 보안성 / 서버 및 개발 환경에서 인기 / 초보자에게 다소 어려움
    - Android(구글) : 모바일 중심 / 오픈 소스 / 광범위한 앱 지원
    - iOS (애플) : 모바일 중심 / 매우 안정적 / 보안성 / 제한된 커스터마이징 / 애플 에코시스템



# 면접에서 OS 관련 자주 나오는 주제
1. 컨텍스트 스위칭(Context Switching) : 컨텍스트 스위치는 CPU가 프로세스 또는 스레드를 번갈아가며 수행하면서 프로세스가 충돌하지 않도록 하는 작업을 의미한다. 효과적인 컨텍스트 스위칭을 통해 멀티 태스킹 환경을 지원할 수 있다. CPU가 전환할 때마다 시스템은 현재 실행 중인 작업을 일시적으로 중단하고, 상태(컨텍스트)를 프로세스 제어 블록인 PCB에 저장한 다음, 대기 열의 다음 작업(프로세스)을 실행한다. 이미 해당 작업이 시작된 경우 CPU는 해당 작업의 상태를 검색하여 중단한 곳에서 실행을 시작할 수 있다. 이러한 작업은 CPU가 대기열의 프로세스 사이를 순환하면서 계속되고 반복된다. 컨텍스트 스위칭을 통해 여러 프로세스가 단일 CPU를 공유하면서도 CPU가 여러 프로세스를 동시에 실행하는 것처럼 보이게 할 수 있다. 이러한 기능은 Windows, Linux, macOS와 같은 멀티태스킹 운영 체제의 핵심 기능이다. 
    - 컨텍스트 스위치가 발생하는 조건
        - 멀티 태스킹 작업 :
              - 실행 가능한 프로세스들이 운영체제의 스케줄러에 의해 조금씩 벌갈아가며 수행되는 것을 말한다.
              - 번갈아가며 프로세스가 CPU를 할당 받는데 이 때 Context Switching 한다.
              - 사용자가 체감하기 힘든 속도로 Context Switching 되며 프로세스가 처리되기 때문에 동시에 처리되는 것처럼 느껴진다.
        - 인터럽트 :
              - 인터럽트란 컴퓨터 시스템에서 예외 상황이 발생했을 때 CPU에게 알려 처리할 수 있도록 하는 것을 말한다. 이 때 CPU는 현재 수행 중인 작업을 멈추고 특정 이벤트를 처리하게 된다. 
              - 인터럽트가 발생하면 Context Switching한다.
              - 예) I/O request : 입출력 요청, time slice expired : CPU 사용시간이 만료, fork a child : 자식 프로세스 생성, wait for an interrupt : 인터럽트 처리 대기의 경우 인터럽트가 발생한다. 
        - 사용자 / 커널 전환 : 사용자와 커널 모드 전환은 Context Switch가 필수는 아니지만 운영체제에 따라 발생할 수 있다.
          ** 사용자 모드 : 응용 프로그램이 실행되는 모드로, 사용자는 제한된 자원에 접근하고 특정 명령을 실행할 수 있는 제한된 권한을 갖고 있다.
          ** 커널 모드 : 운영 체제 커널이 실행되는 모드로, CPU 스케줄링, 메모리 관리, I/O 관리, 파일 시스템 관리 등이 전체 시스템 자원에 접근하고 모든 명령을 실행할 수 있는 최고 권한을 가지고 있다.
        
        CPU가 위와 같은 과정을 만나면 실행 중인 프로세스 간에 번갈아가는 일련의 단계를 시작한다. 다음 그림은 두 프로세스 간에 컨텍스트 전환이 발생하는 방법에 대한 개략적인 개요를 제공한다. 컨텍스트 전환에 대한 정확한 접근 방식은 운영 체제 및 기타 변수에 따라 달라진다. 그러나 개념적으로 다양한 시스템은 유사한 패턴을 따른다. 
        
        ![Untitled](%E1%84%8B%E1%85%AE%E1%86%AB%E1%84%8B%E1%85%A7%E1%86%BC%E1%84%8E%E1%85%A6%E1%84%8C%E1%85%A6%E1%84%85%E1%85%A1%E1%86%AB%20ac368b53d4a74016ac0d6ba786b66ec2/Untitled%202.png)
        
        1. CPU가 프로세스 1을 실행한다.
        2. 인터럽트나 시스템 호출과 같은 트리거 이벤트가 발생한다.
        3. 시스템은 프로레스 1을 일시 정지하고 해당 프로세스에 대해 생성된 프로세스 제어 블록인 PCB 1에 상태(컨텍스트)를 저장한다.
        4. 시스템은 큐에서 프로세스 2를 선택하고 PCB 2에서 프로세스의 상태를 로드한다.
        5. CPU는 프로세스 2를 실행하면서 이전에 중단된 부분부터 이어서 진행한다. (프로세스가 이미 실행 중이었다면).
        6. 다음 트리거 이벤트가 발생하면 시스템은 프로세스 2를 일시 중지하고 해당 상태를 PCB 2에 저장한다.
        7. 프로세스 1 상태가 다시 로드 되고 CPU가 프로세스를 실행하여 다시 중단된 지점에서 시작한다. 프로세스 2는 다시 호출될 때까지 유휴 상태를 유지한다. 
        
        컨텍스트 스위치가 많을수록 앞뒤로 번갈아가며 수행하는 데 필요한 시간이 더 많아진다. 오버헤드가 너무 많아지면 시스템 성능이 저하될 수도 있다. 
        
2. 뮤텍스(Mutex)와 세마포어(Semaphore)의 차이
    - 이들은 모두 공유된 자원의 데이터를 여러 스레드/프로세스가 접근하는 것을 막는 역할을 하는 메커니즘이다. 프로세스 간 메시지를 전송하거나, 공유 메모리를 통해 공유된 자원에 여러 개의 프로세스가 동시에 접근하면 문제가 발생할 수 있다. 이를 해결하기 위해 데이터를 한 번에 하나의 프로세스만 접근할 수 있도록 제한을 두는 동기화 방식을 취해야 한다. 이를 해결하기 위한 대표적인 방법으로 뮤텍스(Mutex)와 세마포어(Semaphore)가 있다.
        - 발생할 수 있는 문제
            1. 일관성 없는 데이터 : 두 개 이상의 스레드가 동시에 공유 자원을 변경하거나 읽을 때 서로 다른 데이터를 읽게 되어 다른 정보를 제공 받을 수 있다.
            2. 데드락(deadlock) : 두 개 이상의 스레드가 서로 다른 자원을 점유하고, 서로 상대방의 자원을 기다릴 때 교착상태가 발생할 수 있다.
            3. 성능 저하 : 스레드 간의 경쟁 상황으로 인해 성능이 저하된다. 
        
        - 이하 뮤텍스와 세마포어 설명에 앞서
            - 동기화? 여러 개의 스레드 또는 프로세스가 공유 자원을 접근할 때, 서로의 작업이 서로에게 영향을 미치지 않도록 조절하는 것을 의미. 동기화를 통해 공유 자원에 대한 접근을 제한함으로써, 스레드 또는 프로세스 간의 경쟁 상황이 발생하지 않도록 하여 일관성 있는 결과를 보장할 수 있게 된다. 대표적인 예시로는 뮤텍스, 세마포어가 있다.
    
    - Mutex(뮤텍스): **하나의 스레드만**이 특정 자원에 접근할 수 있도록 하는 동기화 메커니즘이다. 뮤텍스는 상호 배제를 보장하여, 동시에 여러 스레드가 자원에 접근하는 것을 막는다. 임계구역(Critical Section)을 가진 스레드들의 실행 시간이 서로 겹치지 않고 각각 단독으로 실행(상호 배제)되도록 하는 기술이다. 한 프로세스에 의해 소유 될 수 있는 Key를 기반으로 한 상호 배제 기법이고 Key에 해당하는 어떤 객체(Object)가 있으며, 이 객체를 소유한 스레드/프로세스만이 공유 자원에 접근할 수 있다. 다중 프로세스들의 공유 리소스에 대한 접근을 조율하기 위해 동기화(Synchronization) 또는 락(Lock)을 사용함으로써 뮤텍스 객체를 두 스레드가 동시에 사용할 수 없다.
        
         뮤텍스는 화장실이 하나뿐인 식당과 비슷하다. 화장실을 가기 위해서는 카운터에서 열쇠를 받아야 한다. 당신이 화장실을 가려고 하는데 카운터에 키가 있으면 화장실에 사람이 없다는 뜻이고, 사용자는 열쇠를 이용해 화장실에 들어갈 수 있다.  한 사용자가 화장실에 이미 있다면 다른 사용자가 아무리 용무가 급해도 열쇠가 없기 때문에 화장실에 들어갈 수 없다. 따라서 다른 사용자는 이전 사용자가 용무를 마치고 나올 때까지 카운터에서 기다려야 한다. 이전 사용자가 화장실에서 나와 카운터에 키를 돌려놓았다면 기다리던 사람들 중 맨 앞에 있던 사람이 키를 받아 이를 이용해 화장실에 갈 수 있다. 이것이 뮤텍스가 동작하는 방식이다. 화장실을 이용하는 사람은 프로세스 혹은 쓰레드이며 화장실은 공유 자원, 화장실 키는 공유자원에 접근하기 위해 필요한 어떤 오브젝트이다. 
        

    - Semaphore(세마포어) : **일정한 수의 스레드**만이 자원에 접근할 수 있도록 제어하는 동기화 메커니즘이다. 사용하고 있는 스레드/프로세스의 수를 공통으로 관리하는 하나의 값을 이용해 상호배제를 달성한다. 공유 자원에 접근할 수 있는 프로세스의 최대 허용치만큼 동시에 사용자가 접근할 수 있으며, 각 프로세스는 세마포어의 값을 확인하고 변경할 수 있다. 자원을 사용하지 않는 상태가 될 때, 대기하던 프로세스가 즉시 자원을 사용하고, 이미 다른 프로세스에 의해 사용 중이라는 사실을 알게 되면, 재시도 전에 일정 시간 대기해야 한다. 일반적으로 비교적 긴 시간을 확보하는 리소스에 대해 사용하게 된다.
    
    쉽게 말해, 세마포어는 손님이 화장실을 좀 더 쉽게 이용할 수 있는 레스토랑이다. 세마포어를 이용하는 레스토랑의 화장실에는 여러 개의 칸이 있다. 그리고 화장실 입구에는 현재 화장실의 빈 칸 개수를 보여주는 전광판이 있다. 만약 당신이 화장실에 가고 싶다면 입구에서 빈 칸의 개수를 확인하고 빈 칸이 1개 이상이라면 빈 칸의 개수를 하나 뺀 다음에 화장실로 입장해야 한다. 그리고 나올 때 빈 칸의 개수를 하나 더해준다. 모든 칸에 사람이 들어갔을 경우 빈 칸의 개수는 0이 되며 이 때 화장실에 들어가고자 하는 사람이 있다면 빈 칸의 개수가 1로 바뀔 때까지 기다려야 한다. 사람들은 나오면서 빈 칸의 개수를 1씩 더한다. 그리고 기다리던 사람은 이 숫자에서 1을 뺀 다음 화장실을 이용하게 된다.
    
    이처럼 세마포어는 공통으로 관리하는 하나의 값을 이용해 상호 배제를 달성한다. 
    
    뮤텍스와 세마포어를 화장실 예시를 통해 설명했는데 이 때 화장실은 공유자원이며, 사람들이 스레드 혹은 프로세스이다. 그리고 화장실 빈칸의 개수는 현재 공유자원에 접근할 수 있는 스레드, 프로세스의 개수를 나타낸다.
   뮤텍스와 세마포어를 화장실 예시를 통해 설명했는데 이 때 화장실은 공유자원이며, 사람들이 스레드 혹은 프로세스이다. 그리고 화장실 빈칸의 개수는 현재 공유자원에 접근할 수 있는 스레드, 프로세스의 개수를 나타낸다. 

    뮤텍스의 특징은 상호 배제로, 한 번에 하나의 스레드만 자원에 접근할 수 있으며, 잠금을 획득한 스레드만이 이를 해제할 수 있다. 

    이와 달리 세마포어는 여러 스레드가 자원에 접근할 수 있으며 초기화된 값에 따라 접근 가능한 스레드의 수를 제어한다. 또한 세마포어는 스레드 간의 신호 전달에 사용될 수 있다.

    또한 세마포어는 소유권의 개념이 없으며, 어떤 스레드든 세마포어를 해제할 수 있다. 이러한 특성들로 뮤텍스는 단순한 상호배제와 소유권이 필요한 상황에서, 세마포어는 자원의 개수를 제어하거나 스레드 간 시그널링이 필요한 상황에서 적합하다. 

    예를 들어 뮤텍스의 사용 예시로는 은행 계좌 입출금이 있다. 뮤텍스는 하나의 스레드만이 자원에 접근하도록 보장하므로, 예를 들어 은행 계좌의 입출금 동작을 동기화할 때 유용하다. 여러 스레드가 동시에 같은 계좌에서 출금하려고 할 때, 뮤텍스를 사용하여 상호배제를 보장할 수 있다. 

    이와 달리 세마포어 사용 예시는 주차장 관리 시스템이 있다. 세마 포어는 동시에 접근할 수 있는 스레드의 수를 제한할 수 있기 때문에 주차장의 주차 가능 차량 수를 지정하고, 빈 자리 수에 맞춰 차량을 대기 시키거나, 자리를 할당할 수 있다. 

    실제 운영체제에서는 파일 시스템 관리에 있어서 뮤텍스를 사용한다. 운영 체제는 파일 시스템에서 동시에 여러 스레드가 파일을 읽고 쓰지 못하도록 뮤텍스를 사용한다. 예를 들어 특정 파일에 대한 쓰기 작업이 진행 중일 때, 다른 스레드가 같은 파일에 접근하지 못하도록 뮤텍스를 사용하여 동기화 한다. 혹은 두 개 이상의 프로세스 간 공유 메모리에 접근할 때, 뮤텍스를 사용하여 동기화한다. 이 방식으로 하나의 프로세스 간 공유 메모리에 데이터를 쓸 때 다른 프로세스가 접근하지 못하도록 한다. 혹은 하드웨어 자원에 대한 접근을 동기화 하기 위해서도 뮤텍스를 사용한다. 예를 들어, 프린터 드라이버는 여러 프로세스가 동시에 프린터에 접근하지 않도록 뮤텍스를 사용한다. 

    운영체제는 자원 할당을 할 때 세마포어를 사용하여 제한된 수의 자원을 관리 한다. 예를 들어, 네트워크 연결 풀이나 데이터 베이스 연결 풀에서 동시에 사용할 수 있는 연결 수를 세마포어로 제한한다. 혹은 여러 스레드가 동시에 접근할 수 있는 임계 구역을 세마 포어로 관리한다. 세마 포어는 특정 자원에 접근할 수 있는 스레드의 최대 수를 제어한다. 예를 들어, 다중 스레드 웹 서버에서 동시에 처리할 수 있는 최대 클라이언트 수를 제한하는 데 사용된다. 

-
